from PyQt5.QtWidgets import QWidget, QVBoxLayout, QTabWidget, QLabel, QTableWidget, QTableWidgetItem

class ReportView:
    def __init__(self):
        """
        Inicjalizuje klasę ReportView.
        :param connection: Obiekt połączenia do bazy danych.
        """
        self.connection = get_connection()

        # Dane i kolumny dla każdego widoku
        self.views = [
            {
                "title": "Popular Cars",
                "columns": ["Car ID", "Car Name", "Rental Count"],
                "data": self._get_popular_cars()
            },
            {
                "title": "Customer Rentals Summary",
                "columns": ["Customer ID", "Customer Name", "Total Rentals"],
                "data": self._get_customer_rentals_summary()
            },
            {
                "title": "Monthly Revenue",
                "columns": ["Month", "Revenue"],
                "data": self._get_monthly_revenue()
            },
        ]

    def _get_popular_cars(self):
        """
        Pobiera dane z widoku popular_cars.
        :return: Lista danych.
        """
        return [
            (c.car_id, c.car_name, c.rental_count)
            for c in PopularCar.get_all(self.connection)
        ]

    def _get_customer_rentals_summary(self):
        """
        Pobiera dane z widoku customer_rentals_summary.
        :return: Lista danych.
        """
        return [
            (s.customer_id, s.customer_name, s.total_rentals)
            for s in CustomerRentalSummary.get_all(self.connection)
        ]

    def _get_monthly_revenue(self):
        """
        Pobiera dane dotyczące miesięcznego przychodu z wypożyczeń.
        :return: Lista danych.
        """
        return [
            (r.month, r.revenue)
            for r in MonthlyRevenue.get_all(self.connection)
        ]

    def create(self):
        """
        Tworzy widget z zakładkami dla raportów.
        :return: QWidget z zakładkami.
        """
        widget = QWidget()
        layout = QVBoxLayout()

        # Tworzenie zakładek
        tabs = QTabWidget()

        for view in self.views:
            # Tworzenie widgetu dla pojedynczego widoku
            tab = self._create_tab(view["data"], view["columns"], view["title"])
            tabs.addTab(tab, view["title"])

        # Nasłuchiwanie zmian aktywnej zakładki
        tabs.currentChanged.connect(self.on_tab_change)

        layout.addWidget(tabs)
        widget.setLayout(layout)
        return widget

    def on_tab_change(self, index):
        """
        Funkcja wywoływana przy zmianie zakładki.
        :param index: Indeks aktualnie wybranej zakładki.
        """
        current_tab_title = self.views[index]["title"]
        print(f"Zmiana zakładki na: {current_tab_title}")

        # Możesz tu zrobić cokolwiek chcesz, np. zmienić jakieś dane, zaktualizować widok itp.
        # Na przykład:
        if current_tab_title == "Popular Cars":
            print("Pobieram dane o popularnych samochodach")
        elif current_tab_title == "Customer Rentals Summary":
            print("Pobieram dane o podsumowaniu wypożyczeń klientów")
        elif current_tab_title == "Monthly Revenue":
            print("Pobieram dane o miesięcznych przychodach")

        # Możesz dodać dodatkowe logiki na podstawie zmienionej zakładki

    def _create_tab(self, data, columns, title):
        """
        Tworzy pojedynczy widget zakładki z tabelą.
        :param data: Dane do wyświetlenia (lista krotek).
        :param columns: Kolumny tabeli (lista stringów).
        :param title: Tytuł zakładki.
        :return: QWidget dla zakładki.
        """
        tab = QWidget()
        tab_layout = QVBoxLayout()

        table = QTableWidget()
        table.setRowCount(len(data))
        table.setColumnCount(len(columns))
        table.setHorizontalHeaderLabels(columns)

        for row_idx, row_data in enumerate(data):
            for col_idx, cell_data in enumerate(row_data):
                table.setItem(row_idx, col_idx, QTableWidgetItem(str(cell_data)))

        tab_layout.addWidget(table)
        tab.setLayout(tab_layout)
        return tab
